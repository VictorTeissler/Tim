from struct import unpack,pack


def p(x):
    return pack('<Q', x)


a = [0xcccccccccc0000c2, 0xcccccccccccccccc, 0x058b480603ef37e9, 0x68958b48013530dc, 0x155e150348000001, 0x01a0d5848948013e, 0x00000134858b0000, 0x36366dbd485502a8, 0x2c874800007ff77e, 0x10245c8b48505324, 0x7ff777e02d35b848, 0x8948d8440f480000, 0x22e9c35b5810245c, 0x016167e0e8062c35, 0x0378c3400d100ff3, 0x41000001008d8d48, 0x4c20245c894801b1, 0x4801689361e8c08b, 0x65e8000001008d8d, 0x8dc85d8b48016a1e, 0x8b2c74db8548ff77, 0xf8830843c10ff0c6, 0x8b48038b48207501, 0xc10ff0c68b10ffcb, 0x480c7501f8830c43, 0xcb8b4801578d038b, 0x00b08d8d480850ff, 0xf301616771e80000, 0x480378c2b50d100f, 0x8b4c000001008d8d, 0x8d4801696aeae8c0, 0x4d8d480378b8d315, 0x8b48004390aae8d8, 0x058d4805759e030d, 0x244c8d4c05764104, 0x8d4c202444894840, 0x7c89480378b8bb05, 0x78b8c7158d484024, 0x85e848247c894803, 0x4c48247c3901675f, 0x8b490378bd1a358d, 0xe840245c450f48de, 0x48c9334502a7c47c, 0x89c38b4c28247c89, 0xc88b48d23320247c, 0xd88b4801887f23e8, 0x058b487375c08548, 0x014b8d4405764358, 0x24448d4c48247c39, 0x8b49702444894870, 0x4840244c450f48ce, 0x89480378b892058d, 0x00000c7cba28244c, 0x480378b8790d8d48, 0x656217e820244489, 0x0d8d4c48247c3901, 0x0c7cb8410378b8cc, 0x78b8b7158d480000, 0x48402474450f4c03, 0x894c0378753c0d8d, 0x0166a8f8e8202474, 0x75fee850247c8948, 0x4830247c89480183, 0x4528247c8840c88b, 0x85480590e8920d8b, 0x01fa6070e80574c9, 0x480378b891158d48, 0x00438f50e8f04d8d, 0xe8059571c90d8b48, 0xf04d8d48029bf5b4, 0x158d4800015cfbe8, 0x084d8d480378b88c, 0x4c8d4800438f2be8, 0x05fb468815ff7824, 0xf2804d8d48c0570f, 0x0ff27824442a0f48, 0x0ff20572ab220559, 0x0ff20378c0f20558, 0x894905763cfa0511, 0x8949207f8949287f, 0x05fb465015ff187f, 0x47100f41f280458b, 0x5e0ff23047894120, 0x5a0f66053a34e305, 0xc86348c12c0ff3c8, 0x084d8d48284f8949, 0x8d8d4800015c7be8, 0x61654fe8000000c8, 0x78c0a70d100ff301, 0x000001008d8d4803, 0x016968c8e8c08b4c, 0x480378b7f9158d48, 0x00438e88e8204d8d, 0x49059571010d8b48, 0x5090ff018b48d78b, 0xe8204d8d48000002, 0x450d8d4800015c2c, 0x000047b0e80541f0, 0xe8053a7a490d8d48, 0xe08d8d48000047a4, 0x016164e8e8000000, 0x0378c03c0d100ff3, 0x4c000001008d8d48, 0xe801696861e8c08b, 0x840fc084015e902c, 0x95158d4800000107, 0xe8384d8d480378b7, 0x923d384000438e14, 0x0000c1850f05763b, 0x4800000001b84100, 0x8d480378b78a158d, 0x48016cf541e8884d, 0x48016c3739e8188b, 0x579ee8d38b48c88b, 0x8b4898558d48016c, 0x4850ff41008b4cc8, 0x4cc88b4848778d4d, 0x49008b484574f03b, 0x418b483989480689, 0xc33b48085e8b4908, 0x8949087989482f74, 0x832274db85480846, 0x038b481c7501086b, 0x0c6b8310ffcb8b48, 0x01ba038b480e7501, 0x50ffcb8b48000000, 0xdb8548a05d8b4808, 0x1c7501086b832274, 0x10ffcb8b48038b48, 0x8b480e75010c6b83, 0x8b4800000001ba03, 0x480e8b490850ffcb, 0xff018b480674c985, 0xe800000020b90850, 0x74c08548007f179c, 0x5b93bfe8c88b480a, 0x8d48c78b4803eb02, 0xdde840478949384d, 0xb6b6158d4800015a, 0x0de8a84d8d480378, 0x016f16a8e800438d, 0xc88b4800000006ba, 0x841850ff41008b4c, 0xe8000002b9840fc0, 0x000006ba016f160c, 0x41008b4cc88b4800, 0x9d840fc0841050ff, 0xe8a84d8d48000002, 0xb5158d4800015a8c, 0xe8504d8d480378b6, 0x350d8b4800438cbc, 0x90ff018b4805956f, 0x504d8d4800000258, 0x0d8b4800015a63e8, 0x74c985480590e5c4, 0x01fa4120e801b23b, 0x8d158d483074c084, 0xe8684d8d480378b6, 0x9d0d8b4800438c7c, 0x61cee801b20590e5, 0x90e58f0d8b4801fa, 0x8d4801fa66f2e805, 0x85158d482beb684d, 0x00808d8d480378b6, 0xe800438c49e80000, 0x8b48d2330236b8f4, 0x5050ff41008b4cc8, 0xe8000000808d8d48, 0x0001b841000159ec, 0x78aa93158d480000, 0xf366e8904d8d4803, 0x355ee8188b48016c, 0xd38b48c88b48016c, 0xf08b4c016c55c3e8, 0x0000b4840fc08548, 0x4de800000008b900, 0x8548d88b48007f16, 0xb956058d480c74c0, 0x4803eb0389480378, 0xe800000018b9df8b, 0x74c08548007f162c, 0x0378bd300d8d481e, 0x48000000010840c7, 0x0000010c40c70889, 0x4803eb1058894800, 0x5c8948c38b4cc78b, 0x448948d38b486024, 0xe860244c8d486824, 0x48068b490000641c, 0xffce8b496024548d, 0x5c8b480000009890, 0x8b2e74db85486824, 0xf8830843c10ff0c6, 0x8b48038b48227501, 0xc10ff0c68b10ffcb, 0x480e7501f8830c43, 0x4800000001ba038b, 0x0003ba0850ffcb8b, 0x057638c305c60000, 0x029c7fb0e801b101, 0x508d41c933c03345, 0x8b4801607582e820, 0x8d483a74c08548d8, 0x0389480378b9ab05, 0x4800007159058d48, 0x015c6290e8084389, 0xa5158d4818438948, 0xb9d6058d4805763a, 0x038948cb8b480378, 0x3feb0378ba0215ff, 0x377405763a923d39, 0x4805763a810d8b48, 0x33018b482b74c985, 0x6d0d8b483050ffd2, 0x1174c9854805763a, 0x750ee8d233c03345, 0x763a570589480160, 0x4805763a593d8905, 0x33038b482574db85, 0x453050ffcb8b48d2, 0xe8cb8b48d233c033, 0x74c08548016074e4, 0x5f8f07e8c88b4808, 0x8b48015f9ae2e801, 0xc5e80160b74ae8c8, 0xb4a6158d48016bde, 0x0000988d8d480378, 0x8d4800438a52e800, 0x4396e8053a76530d, 0x0000988d8d480000, 0x15eb000157fae800, 0x37c005c6a84d8d48, 0x000157e8e8010576, 0x8d8d4800000001bf, 0x694e47e800000100, 0x000001209d8b4801, 0x48000000014c85c6, 0x0ff0c68b2e74db85, 0x227501f8830843c1, 0x10ffcb8b48038b48, 0x830c43c10ff0c68b, 0xba038b480e7501f8, 0xffcb8b4800000001, 0x0001089d8b480850, 0xc68b2a74db854800, 0x01f8830843c10ff0, 0xcb8b48038b481e75, 0x830c73c10ff010ff, 0x8b038b4c0c7501fe, 0x0850ff41cb8b48d6, 0x7400057637793d80, 0x740058247c834812, 0x45e858244c8d480a, 0x8d8b48c78b016cd4, 0xe8cc334800000170, 0x249c8d4c0368f664, ]

enc_str = ''
for i in a:
    enc_str += p(i)

print enc_str


def xor(s, k):
    ret = ''
    for i in range(0, len(s), 4):
        ret += pack('>I', unpack('>I', s[i:i+4])[0] ^ k)
    return ret

def analize(s):
    score = 0
    for c in s:
        if (ord(c) > 0x1f) and (ord(c) < 0x7f):
            score += 1
    return score

# for smallk in xrange(0xffff):
#     k = (smallk << 16) | smallk
#     print '0x%4x->%s' % (k, xor(enc_str, k).replace('\n', '').replace('\0', ''))

highest = 0
for k in xrange(0xffff):
    dec = xor(enc_str, k).replace('\n', '').replace('\0', '')
    tmp_score = analize(dec)
    if tmp_score > highest:
        highest = tmp_score
        print 'New high score %d for key 0x%x->%s' % (highest, k, dec)